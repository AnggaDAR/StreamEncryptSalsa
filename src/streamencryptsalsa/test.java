/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streamencryptsalsa;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import javax.imageio.ImageIO;

/**
 *
 * @author CVGS
 */
public class test extends javax.swing.JFrame {

    /**
     * Creates new form test
     */
    public test() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(145, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, InvalidKeyException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        String num, bin;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new test().setVisible(true);
            }
        });
        String encryptedFilename = "server/encrypted.png";
        String filename = "server/capture.png";
        String decryptedFilename = "client/decrypted.png";
        String encryptedFilename2 = "client/encrypted.png";

        encrypt64_128(filename, encryptedFilename);

        decrypt64_128(encryptedFilename, decryptedFilename);
//        System.out.println(i % 200);
//        while (i < 512) {
//            num = String.format("%3s", Integer.toString(i)).replace(' ', '0');
//            bin = String.format("%16s", Integer.toBinaryString(i)).replace(' ', '0');
//            System.out.print(num+"->");
//            System.out.println(bin);
//            i++;
//        }
//        int tes = 255;
//        int coba = tes << 3;
//        System.out.println(tes + "|" + coba);
//        int red, green, blue;
//        String r, g, b;

//        red = 109;
//        green = 184;
//        blue = 224;
////                    alpha = c.getAlpha();
////                    Color newColor = new Color(red, green, blue, alpha);
//        r = String.format("%16s", Integer.toBinaryString(red)).replace(' ', '0');
//        g = String.format("%16s", Integer.toBinaryString(green)).replace(' ', '0');
//        b = String.format("%16s", Integer.toBinaryString(blue)).replace(' ', '0');
//        System.out.println(red + "|" + green + "|" + blue + "-");
//        System.out.println(r + "|" + g + "|" + b + "-");
//        red = rotateLeft(red, 3, 8) & 0xFF;
//        green = rotateLeft(green, 3, 8) & 0xFF;
//        blue = rotateLeft(blue, 3, 8) & 0xFF;
////        Color newColor = new Color(red, green, blue);
////        image.setRGB(j, i, newColor.getRGB());
//        r = String.format("%16s", Integer.toBinaryString(red)).replace(' ', '0');
//        g = String.format("%16s", Integer.toBinaryString(green)).replace(' ', '0');
//        b = String.format("%16s", Integer.toBinaryString(blue)).replace(' ', '0');
////                    a = String.format("%16s", Integer.toBinaryString(alpha)).replace(' ', '0');
////                    pixelBit[i][j] = r + g + b + a;
//        System.out.println(red + "|" + green + "|" + blue + "-");
//        System.out.println(r + "|" + g + "|" + b + "-");
//
//        red = rotateRight(red, 3, 8) & 0xFF;
//        green = rotateRight(green, 3, 8) & 0xFF;
//        blue = rotateRight(blue, 3, 8) & 0xFF;
//        r = String.format("%16s", Integer.toBinaryString(red)).replace(' ', '0');
//        g = String.format("%16s", Integer.toBinaryString(green)).replace(' ', '0');
//        b = String.format("%16s", Integer.toBinaryString(blue)).replace(' ', '0');
////                    a = String.format("%16s", Integer.toBinaryString(alpha)).replace(' ', '0');
////                    pixelBit[i][j] = r + g + b + a;
//        System.out.println(red + "|" + green + "|" + blue + "-");
//        System.out.println(r + "|" + g + "|" + b + "-");
//        int n = 2;
//        String test;
//        // returns the value obtained by rotating left
//        for (int i = 0; i < 4; i++) {
//            n = Integer.rotateLeft(n, 4);
//            System.out.println(n);
//            test = String.format("%8s", Integer.toBinaryString(n)).replace(' ', '0');
//            System.out.println(test);
//        }
//        cekWarna();
//        setKey();
//        ambilWarna();
    }

    static int rotateLeft(int n, int s, int bits) {
        return ((n << s) | (n >>> (bits - s)) & 0xFFFFFF);
    }

    static int rotateRight(int n, int s, int bits) {
        return ((n >>> s) | (n << bits - s)) & 0xFFFFFF;
    }

    static void cekWarna() throws IOException {
        BufferedImage image1 = ImageIO.read(new File("server/encrypted.png"));
        BufferedImage image2 = ImageIO.read(new File("client/encrypted.png"));
        int width1, width2;
        int height1, height2;
        int red1, green1, blue1, red2, green2, blue2, alpha;
        boolean isSimilar = true, different = true;
        width1 = image1.getWidth();
        width2 = image2.getWidth();
        height1 = image1.getHeight();
        height2 = image2.getHeight();
        int[][][] similarity = new int[height1][width1][3];
        int[][][] difference = new int[height1][width1][3];
        if ((width1 == width2) && (height1 == height2)) {
            System.out.println("Ukuran gambar sama");
            System.out.println("-------Print RGB-------");
            for (int i = 0; i < height1; i++) {
                for (int j = 0; j < width1; j++) {
                    Color c1 = new Color(image1.getRGB(j, i));
                    Color c2 = new Color(image2.getRGB(j, i));
                    red1 = c1.getRed();
                    green1 = c1.getGreen();
                    blue1 = c1.getBlue();
                    red2 = c2.getRed();
                    green2 = c2.getGreen();
                    blue2 = c2.getBlue();
                    if (red1 == red2) {
                        similarity[i][j][0] = 1;
                    } else {
                        similarity[i][j][0] = 0;
                    }
                    difference[i][j][0] = red2 - red1;
                    if (green1 == green2) {
                        similarity[i][j][1] = 1;
                    } else {
                        similarity[i][j][1] = 0;
                    }
                    difference[i][j][1] = green2 - green1;
                    if (blue1 == blue2) {
                        similarity[i][j][2] = 1;
                    } else {
                        similarity[i][j][2] = 0;
                    }
                    difference[i][j][2] = blue2 - blue1;
//                    System.out.print(red1 + "|" + green1 + "|" + blue1 + "-1-");
//                    System.out.print(red2 + "|" + green2 + "|" + blue2 + "-2-");
                }
//                System.out.println("");
            }
            System.out.println("-------similarity-------");
            for (int i = 0; i < height1; i++) {
                for (int j = 0; j < width1; j++) {
//                    System.out.print(similarity[i][j][0] + "|" + similarity[i][j][1] + "|" + similarity[i][j][2] + "-");
                }
//                System.out.println("");
            }
            for (int i = 0; i < height1; i++) {
                for (int j = 0; j < width1; j++) {
                    for (int k = 0; k < 3; k++) {
                        if (similarity[i][j][k] == 1) {
                            isSimilar = true;
                        } else {
                            isSimilar = false;
                            break;
                        }
                    }
                }
            }
            if (isSimilar) {
                System.out.println("Gambar sama 100%");
            } else {
                System.out.println("Gambar memiliki perbedaan");
            }
            System.out.println("-------difference-------");
            for (int i = 0; i < height1; i++) {
                for (int j = 0; j < width1; j++) {
//                    System.out.print(difference[i][j][0] + "|" + difference[i][j][1] + "|" + difference[i][j][2] + "-");
                }
//                System.out.println("");
            }

        } else {
            System.out.println("Ukuran gambar berbeda");
        }
        System.out.println(image1.getRGB(0, 0));
        Color c1 = new Color(image1.getRGB(0, 0));
        red1 = c1.getRed();
        green1 = c1.getGreen();
        blue1 = c1.getBlue();
        alpha = c1.getAlpha();
        System.out.println(Integer.toHexString(image1.getRGB(0, 0)));
        System.out.println(Integer.toHexString(alpha) + ""
                + Integer.toHexString(red1) + ""
                + Integer.toHexString(green1) + ""
                + Integer.toHexString(blue1));
        System.out.println(Integer.parseInt(Integer.toHexString(image1.getRGB(0, 0)), 16));
        int q = Integer.parseInt("ff650e4e", 16);
        System.out.println(q);
        System.out.println(Integer.toBinaryString(q));
        System.out.println(Integer.parseInt(Long.toBinaryString(q), 2));
        System.out.println(rotateLeft(image1.getRGB(0, 0), 3, 32));
        System.out.println(Integer.toBinaryString(rotateLeft(image1.getRGB(0, 0), 3, 32)));

    }

    static void ambilWarna() throws IOException {
        BufferedImage image = ImageIO.read(new File("server/encrypted.png"));
        byte[] z = {01, 01, 01, 01, 01, 00, 01, 00,
            00, 00, 01, 00, 00, 01, 00, 01,
            00, 01, 01, 00, 00, 00, 00, 01,
            01, 01, 00, 00, 01, 01, 00, 01,
            01, 01, 01, 01, 00, 01, 00, 00,
            00, 01, 00, 00, 01, 00, 01, 00,
            01, 01, 00, 00, 00, 00, 01, 01,
            01, 00, 00, 01, 01, 00,};
        int width, height, d = 0;
        int red, green, blue, alpha;
        width = image.getWidth();
        height = image.getHeight();
        int[] pixelRGB = new int[width * height];
        String[] pixRGB = new String[width * height];
        String[] pixRGB2 = new String[width * height];
        String[] pixRGB3 = new String[width * height];
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                Color c = new Color(image.getRGB(j, i));
                red = c.getRed();
                green = c.getGreen();
                blue = c.getBlue();
                alpha = c.getAlpha();
                pixelRGB[d] = image.getRGB(j, i);
                pixRGB[d] = Integer.toHexString(pixelRGB[d]);
                pixRGB2[d] = Integer.toHexString(rotateLeft(pixelRGB[d], 2, 32));
                pixRGB3[d] = Integer.toHexString(rotateRight((int) Long.parseLong(pixRGB2[d], 16), 2, 32));
//                    red = rotateLeft(red, 5, 8) & 0xFF;
//                    green = rotateLeft(green, 6, 8) & 0xFF;
//                    blue = rotateLeft(blue, 3, 8) & 0xFF;
//                    alpha = rotateLeft(alpha, 4, 8) & 0xFF;
                Color newColor = new Color(red, green, blue, alpha);
                image.setRGB(j, i, newColor.getRGB());
                d++;
            }
        }
        for (int i = 0; i < pixRGB.length; i++) {
            System.out.print(pixRGB[i] + "<<" + pixRGB2[i] + ">>" + pixRGB3[i]
                    + "|");
            if (i % width == width - 1) {
                System.out.println("");
                System.out.println(i);
            }
        }
    }

    static void setKey() {
        int rounds = 32;
        int wordSize = 16;
        int keyWords = 4;
        byte[] z = new byte[]{01, 01, 01, 01, 01, 00, 01, 00,
            00, 00, 01, 00, 00, 01, 00, 01,
            00, 01, 01, 00, 00, 00, 00, 01,
            01, 01, 00, 00, 01, 01, 00, 01,
            01, 01, 01, 01, 00, 01, 00, 00,
            00, 01, 00, 00, 01, 00, 01, 00,
            01, 01, 00, 00, 00, 00, 01, 01,
            01, 00, 00, 01, 01, 00};
        String key = "1918111009080100";
        int[] eKey = new int[rounds];

        System.out.println(key);
        for (int i = 0; i < keyWords; i++) {
            int index = i * keyWords;
            eKey[i] = Integer.parseInt(key.substring(index, index + 4), 16);
            System.out.println(eKey[i] + "|" + Integer.toHexString(eKey[i]));
        }
        for (int i = keyWords; i < rounds; i++) {
            int tmp = rotateRight(eKey[i - 1], 3, wordSize);
            if (keyWords == 4) {
                tmp ^= eKey[i - 3];
            }
            tmp = tmp ^ rotateRight(tmp, 1, wordSize);
            eKey[i] = tmp ^ eKey[i - keyWords] ^ z[(i - keyWords) % 62];
            System.out.println(eKey[i] + "|" + Integer.toHexString(eKey[i]));
        }
    }

    static void encrypt64_128(String img, String encImg) throws IOException, InvalidKeyException {
        int wordSize = 32, keyWords = 4, rounds = 44;
        BufferedImage image = ImageIO.read(new File(img));
        int width, height, d = 0;
        int red, green, blue, alpha;
        int x, y, tmp;
        width = image.getWidth();
        height = image.getHeight();
        int[] pixelRGB = new int[width * height];
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                pixelRGB[d] = image.getRGB(j, i);
                d++;
            }
        }
        for (int i = 0; i < pixelRGB.length / 2; i++) {
            int index = i * 2;
            x = pixelRGB[index];
            y = pixelRGB[index + 1];
            if (i < 5) {
                System.out.println(Integer.toBinaryString(x) + "|" + Integer.toBinaryString(y));
            }
            for (int j = 0; j < rounds - 1; j++) {
                tmp = x;
                x = y ^ /*(rotateLeft(x, 1, 32) & rotateLeft(x, 8, 32)) ^ */ rotateLeft(x, 2, 24);
                y = tmp;
            }
            if (i < 5) {
                System.out.println(Integer.toBinaryString(x) + "|" + Integer.toBinaryString(y));
                System.out.println("");
            }
            pixelRGB[index] = x;
            pixelRGB[index + 1] = y;
        }
        d = 0;
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                Color newColor = new Color(pixelRGB[d], true);
                if (d < 10) {
                    System.out.println(newColor);
                    System.out.print(Integer.toBinaryString(image.getRGB(j, i)) + "|");
                    if (d % 2 == 1) {
                        System.out.println("");
                    }
                }
                image.setRGB(j, i, newColor.getRGB());

                d++;
            }

        }
        File output = new File(encImg);
        output.setWritable(true);
        ImageIO.write(image, "png", output);
        System.out.println("----------------------------------------");
    }

    static void decrypt64_128(String encImg, String decImg) throws IOException, InvalidKeyException {
        int wordSize = 32, keyWords = 4, rounds = 44;
        BufferedImage image = ImageIO.read(new File(encImg));
        int width, height, d = 0;
        int red, green, blue, alpha;
        int x, y, tmp;
        width = image.getWidth();
        height = image.getHeight();
        int[] pixelRGB = new int[width * height];

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                pixelRGB[d] = image.getRGB(j, i);
                d++;
            }
        }
        for (int i = 0; i < pixelRGB.length / 2; i++) {
            int index = i * 2;
            x = pixelRGB[index];
            y = pixelRGB[index + 1];
            if (i < 5) {
                System.out.println(Integer.toBinaryString(x) + "|" + Integer.toBinaryString(y));
            }
            for (int j = 0; j < rounds - 1; j++) {
                tmp = y;
                y = x;// ^ /*(rotateLeft(y, 1, 32) & rotateLeft(y, 8, 32)) / */ rotateLeft(y, 2, 32);

                x = tmp;
            }
            if (i < 5) {
                System.out.println(Integer.toBinaryString(x) + "|" + Integer.toBinaryString(y));
                System.out.println("");
            }
            pixelRGB[index] = x;
            pixelRGB[index + 1] = y;
        }
        d = 0;
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                Color newColor = new Color(pixelRGB[d],true);
                image.setRGB(j, i, newColor.getRGB());
                d++;
            }
        }
        File output = new File(decImg);
        output.setWritable(true);
        ImageIO.write(image, "png", output);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
