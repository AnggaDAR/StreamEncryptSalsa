/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streamencryptsalsa;

import com.github.sarxos.webcam.Webcam;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author CVGS
 */
public class ServerStream extends javax.swing.JFrame {

    /**
     * Creates new form ServerStream
     */
    private final Dimension ds1 = new Dimension(176, 144);//inisialisasi resolusi webcam
    private final Dimension ds2 = new Dimension(320, 240);//inisialisasi resolusi webcam
    private final Dimension ds3 = new Dimension(640, 480);//inisialisasi resolusi webcam
    Webcam webcam = Webcam.getDefault();
    Boolean isRunning = false;
    double frameNum = 0;
    long capFrameStart;
    long capFrameFinish;
    int pixelSize;
    ServerSocket server = null;
    Socket socket;

    public ServerStream() throws NoSuchAlgorithmException, IOException {
        initComponents();
        Dimension screenSize, windowSize;
        int sWidth, wWidth, sHeight, wHeight;

        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        windowSize = getSize();
        sWidth = (int) screenSize.getWidth();
        wWidth = (int) windowSize.getWidth();
        sHeight = (int) screenSize.getHeight();
        wHeight = (int) windowSize.getHeight();
        setLocation((sWidth / 2) - wWidth, 0);//(sHeight / 2) - wHeight);
//        jLabel5.setVisible(false);
//        cbResolusi.setVisible(false);
//        webcam.setViewSize(ds1);
//        webcam.open();
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.out.println("Closed");
                webcam.close();
                e.getWindow().dispose();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EncVidLarge = new javax.swing.JFrame();
        encVidMaximize = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        panelKey = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buttonStart = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        fieldIPT = new javax.swing.JTextField();
        fieldPortT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cbResolusi = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        fieldIV = new javax.swing.JTextField();
        buttonKey = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fieldKey = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        originalVideo = new javax.swing.JLabel();
        encryptedVideo = new javax.swing.JLabel();
        panelKey1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        statusText = new javax.swing.JLabel();

        encVidMaximize.setText("jLabel2");

        javax.swing.GroupLayout EncVidLargeLayout = new javax.swing.GroupLayout(EncVidLarge.getContentPane());
        EncVidLarge.getContentPane().setLayout(EncVidLargeLayout);
        EncVidLargeLayout.setHorizontalGroup(
            EncVidLargeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EncVidLargeLayout.createSequentialGroup()
                .addComponent(encVidMaximize, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        EncVidLargeLayout.setVerticalGroup(
            EncVidLargeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EncVidLargeLayout.createSequentialGroup()
                .addComponent(encVidMaximize, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server Webcam | SIMON 48/72");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Key : ");

        buttonStart.setBackground(new java.awt.Color(255, 255, 255));
        buttonStart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonStart.setForeground(java.awt.Color.green);
        buttonStart.setText("Start Video Streaming");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Transmitter IP : ");

        fieldIPT.setEditable(false);
        fieldIPT.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        fieldIPT.setEnabled(false);

        fieldPortT.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Open Port : ");

        cbResolusi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "176x144", "320x240", "640x480" }));
        cbResolusi.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Resolusi : ");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("IV : ");

        fieldIV.setEditable(false);
        fieldIV.setText("------Autogenerate------");
        fieldIV.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        buttonKey.setText("Generate Key & IV");
        buttonKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKeyActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        fieldKey.setEditable(false);
        fieldKey.setColumns(20);
        fieldKey.setLineWrap(true);
        fieldKey.setRows(5);
        fieldKey.setWrapStyleWord(true);
        jScrollPane2.setViewportView(fieldKey);

        javax.swing.GroupLayout panelKeyLayout = new javax.swing.GroupLayout(panelKey);
        panelKey.setLayout(panelKeyLayout);
        panelKeyLayout.setHorizontalGroup(
            panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKeyLayout.createSequentialGroup()
                .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelKeyLayout.createSequentialGroup()
                        .addComponent(fieldIV, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelKeyLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbResolusi, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buttonKey, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addGroup(panelKeyLayout.createSequentialGroup()
                        .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fieldPortT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(fieldIPT, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelKeyLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        panelKeyLayout.setVerticalGroup(
            panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKeyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldIV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(buttonKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelKeyLayout.createSequentialGroup()
                        .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbResolusi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(fieldIPT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldPortT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addComponent(buttonStart, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Original Video");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Encrypted Video");

        originalVideo.setBackground(new java.awt.Color(0, 0, 0));
        originalVideo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        originalVideo.setText("Original Video");

        encryptedVideo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        encryptedVideo.setText("Encrypted Video");

        panelKey1.setToolTipText("");
        panelKey1.setName(""); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Status");

        statusText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        statusText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusText.setText("Click \"Start Video Streaming\" to start capture video and see status here");

        javax.swing.GroupLayout panelKey1Layout = new javax.swing.GroupLayout(panelKey1);
        panelKey1.setLayout(panelKey1Layout);
        panelKey1Layout.setHorizontalGroup(
            panelKey1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelKey1Layout.setVerticalGroup(
            panelKey1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKey1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(originalVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(encryptedVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20))
                    .addComponent(panelKey1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encryptedVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(originalVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panelKey1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed

        if (!isRunning && !fieldPortT.getText().isEmpty()) {
//            int port = Integer.parseInt(fieldPortT.getText());
//            try {
//                server = new ServerSocket(port);
//                System.out.println("Server socket ready on port: " + port);
//                socket = server.accept();
//            } catch (IOException e) {
//                System.err.println("Could not listen on port: " + port);
////                System.exit(-1);
//            }
            switch (cbResolusi.getSelectedIndex()) {
                case 0:
                    webcam.setViewSize(ds1);
                    encryptedVideo.setSize(ds1);
                    originalVideo.setSize(ds1);
                    pixelSize = 176 * 144;
                    break;
                case 1:
                    webcam.setViewSize(ds2);
                    encryptedVideo.setSize(ds2);
                    originalVideo.setSize(ds2);
                    pixelSize = 320 * 240;
                    break;
                case 2:
                    webcam.setViewSize(ds3);
                    encryptedVideo.setSize(ds3);
                    originalVideo.setSize(ds3);
                    pixelSize = 640 * 480;
                    break;
                default:
                    throw new AssertionError();
            }
            webcam.open();
            isRunning = true;
//            try {
//                fieldIPT.setText(InetAddress.getLocalHost().getHostAddress());
//            } catch (UnknownHostException ex) {
//                Logger.getLogger(ServerStream.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            fieldPortT.setText(Integer.toString(portSrc));
            buttonStart.setText("Stop Video Streaming");
            buttonStart.setForeground(Color.red);
            originalVideo.setText("");
            encryptedVideo.setText("");
 /*Mulai capture*/
            new VideoFeed().start();
        } else if (fieldIPT.getText().isEmpty() || fieldPortT.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "IP dan Port Tidak Lengkap !\nLengkapi Inputan IP dan Port");
        } else {
            isRunning = false;
            buttonStart.setText("Start Video Streaming");
            buttonStart.setForeground(Color.green);
            webcam.close();
//            try {
//                socket.close();
//            } catch (IOException ex) {
//                Logger.getLogger(ServerStream.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
    }//GEN-LAST:event_buttonStartActionPerformed

    private void buttonKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKeyActionPerformed
//        String key = "c1b5d7cf0d1b61ec7a22a53b622d7a83";
//        String iv = "61066d4e77b9d215";
        Random r = new Random();
        int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10;
        String k1, k2, k3, k4, k5, k6, k7, k8, k9, k10;
        n1 = r.nextInt();
        n2 = r.nextInt();
        n3 = r.nextInt();
        n4 = r.nextInt();
        n5 = r.nextInt();
        n6 = r.nextInt();
        n7 = r.nextInt();
        n8 = r.nextInt();

        n9 = r.nextInt();
        n10 = r.nextInt();

        k1 = String.format("%08x", n1);
        k2 = String.format("%08x", n2);
        k3 = String.format("%08x", n3);
        k4 = String.format("%08x", n4);
        k5 = String.format("%08x", n5);
        k6 = String.format("%08x", n6);
        k7 = String.format("%08x", n7);
        k8 = String.format("%08x", n8);

        k9 = String.format("%08x", n9);
        k10 = String.format("%08x", n10);

        String key = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8;
        String iv = k9 + k10;
        fieldKey.setText(key);
        fieldIV.setText(iv);
    }//GEN-LAST:event_buttonKeyActionPerformed

    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    ServerStream serverStream = new ServerStream();
                    serverStream.setVisible(true);
                    serverStream.fieldIPT.setText(InetAddress.getLocalHost().getHostAddress());
                    serverStream.fieldPortT.setText("3000");
//                    serverStream.fieldIPR.setText(InetAddress.getLocalHost().getHostAddress());
//                    serverStream.fieldPortR.setText("5100");

                    serverStream.setDefaultCloseOperation(EXIT_ON_CLOSE);
                } catch (NoSuchAlgorithmException | IOException ex) {
                    Logger.getLogger(ServerStream.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    class VideoFeed extends Thread {

        @Override
        public void run() {
            int msgLength;
            String filename, encryptedFilename, key, iv;
            BufferedImage image, encImage;
            Image img, encImg;
            FileOutputStream fo;
            BufferedOutputStream bo;
            DecimalFormat df;
            long firstCapTime, timeDiff, encTime, avgEncTime = 0, runTime;
            double fps;

            fps = 0;
            filename = "server/capture.jpg";//nama file hasil capture
            encryptedFilename = "server/encrypted.jpg";//nama file hasil enkripsi
            firstCapTime = System.currentTimeMillis();//waktu pertama kali capture webcam
            timeDiff = 0;
            df = new DecimalFormat("#.##");
            key = fieldKey.getText();
            iv = fieldIV.getText();
            msgLength = pixelSize * 3;
            if (key.length() == 32) {
                key += key;
            }
            Salsa20 salsa = new Salsa20(key, iv, msgLength);//Inisialisasi metode simon 48/72 dengan key yang telah dibangkitkan
            while (isRunning) {
                try {
                    if (webcam.isOpen()) {
                        image = webcam.getImage();//capture gambar webcam
                        fo = new FileOutputStream(filename);
                        bo = new BufferedOutputStream(fo);
                        ImageIO.write(image, "jpg", bo);//penyimpanan gambar hasil capture webcam
                        bo.close();
//                        img = ImageIO.read(new File(filename));
                        img = image.getScaledInstance(originalVideo.getWidth(), originalVideo.getHeight(), Image.SCALE_SMOOTH);
                        originalVideo.setIcon(new ImageIcon(img));//menampilkan gambar hasil capture webcam
                        capFrameStart = System.currentTimeMillis();//waktu memulai capture frame terkini
                        salsa.encryptSalsa20(filename, encryptedFilename);//enkripsi simon 48/72
                        encImage = ImageIO.read(new File(encryptedFilename));//pembacaan gambar hasil enkripsi
                        encImg = encImage.getScaledInstance(encryptedVideo.getWidth(), encryptedVideo.getHeight(), Image.SCALE_SMOOTH);
                        encryptedVideo.setIcon(new ImageIcon(encImg));//menampilkan gambar hasil enkripsi
                        capFrameFinish = System.currentTimeMillis();//waktu akhir capture frame terkini
                        encTime = capFrameFinish - capFrameStart;//menghitung waktu enkripsi per frame
                        runTime = capFrameFinish - firstCapTime;//menghitung waktu capture sejak awal dimulai
                        /*Penghitungan Frame Rate (fps)*/
                        if (runTime < 1000) {
                            frameNum++;
                            avgEncTime += encTime / frameNum;
                            fps = (frameNum / runTime) * 1000;
//                            statusText.setText("Frame Rate : " + df.format(fps) + " fps | Encrypting Time : " + encTime + " ms | Total Time : " + runTime / 1000 + " s");
                        } else if (runTime - timeDiff < 1000) {
                            frameNum++;
//                            statusText.setText("Frame Rate : " + df.format(fps) + " fps | Encrypting Time : " + encTime + " ms | Total Time : " + runTime / 1000 + " s");
                        } else {
                            fps = frameNum;
                            timeDiff += 1000;
                            frameNum = 1;
                        }
                        statusText.setText("Frame Rate : " + df.format(fps) + " fps | Encrypting Time : " + encTime + " ms | Total Time : " + runTime / 1000 + " s");

                        /*-----------------------------*/
                        sendCaptureImage2(encryptedFilename);//pengiriman gambar terenkripsi dengan udp
//                        Thread.sleep(1000 / capRate);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ServerStream.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public void sendCaptureImage(String encFile) throws IOException {
            byte[] byteImage;

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            BufferedImage bufferedImage = ImageIO.read(new File(encFile));

            ImageIO.write(bufferedImage, "png", baos);
            baos.flush();
            byteImage = baos.toByteArray();

            OutputStream os = socket.getOutputStream();

            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(byteImage);
        }

        /* pengiriman dengan UDP*/
        public void sendCaptureImage2(String encFile) {
            try {
                String ipSrc, ipDst;
                int portSrc, portDst;
                BufferedImage img;
                ByteArrayOutputStream baos;
                byte[] buffer;
                InetAddress IPSource, IPDestination;
                DatagramSocket serverSocket;
                DatagramPacket packet;

                ipSrc = fieldIPT.getText();
//                ipDst = fieldIPR.getText();
                ipDst = fieldIPT.getText();

                portSrc = Integer.parseInt(fieldPortT.getText());
//                portDst = Integer.parseInt(fieldPortR.getText());
                portDst = 5000;

                img = ImageIO.read(new File(encFile));
                baos = new ByteArrayOutputStream();
                ImageIO.write(img, "jpg", baos);
                baos.flush();
                buffer = baos.toByteArray();
                IPSource = InetAddress.getByName(ipSrc);
                IPDestination = InetAddress.getByName(ipDst);
                serverSocket = new DatagramSocket(portSrc, IPSource);
                packet = new DatagramPacket(buffer, buffer.length, IPDestination, portDst);
//                packet = new DatagramPacket(buffer, buffer.length);
                serverSocket.send(packet);
                serverSocket.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame EncVidLarge;
    private javax.swing.JButton buttonKey;
    private javax.swing.JButton buttonStart;
    private javax.swing.JComboBox<String> cbResolusi;
    private javax.swing.JLabel encVidMaximize;
    private javax.swing.JLabel encryptedVideo;
    private javax.swing.JTextField fieldIPT;
    private javax.swing.JTextField fieldIV;
    private javax.swing.JTextArea fieldKey;
    private javax.swing.JTextField fieldPortT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel originalVideo;
    private javax.swing.JPanel panelKey;
    private javax.swing.JPanel panelKey1;
    private javax.swing.JLabel statusText;
    // End of variables declaration//GEN-END:variables
}
